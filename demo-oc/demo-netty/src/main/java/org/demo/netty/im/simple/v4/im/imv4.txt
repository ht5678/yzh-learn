基础版demo:

v1 : 支持单点启动 , 接收websocket消息
v2 : 在v1基础上 , 增加auth登录校验 , 并且模拟报文进行数据交互
	handler chain :
		AuthorizationHandler -> PollingTransport -> WebsocketTransport
		
	v2 demo测试AuthorizationHandler

v3 : LocalCacheDemo :  本地缓存测试 concurrent hash map
	   NodeIdDemo     :  生成nodeid测试
	   RoutingTableDemo : 测试用户session和route存在哪里 , session存在local cache ; route信息存在hazelcast imap里
	   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	   
	   
v4 : DefaultCustomQueue (CustomQueue) 底层结构是 LinkedBlockingQueue 
	   LocalTransportStore 底层结构是 CustomQueue
	   *****org.demo.netty.im.fake.im.bs.handler.PollingTransport.channelRead(ChannelHandlerContext, Object)是切入点*****
	   
	   
	   CustomerAssignStatus.ASSIGNED;		//customer是否被分配客服	   
	   OCIMServer.getInst().getRoutingTable().routePacket(packet);		//分发packet , 根据packet中的AddressTo.to.uid , 根据uid从routeQueue里获取netty  session ,  分发给customer或者waiter
	   		//如果没有分配客服 ,
	   			// 
	   			
	   org.demo.netty.im.simple.v4.im.session.LocalCustomerSession.sendPacket(Packet)
		//如果是socket连接 ,  channel.writeAndFlush(packet);  发送消息
		//如果不是socket连接(客户端连接)
		//add到LocalTransportStore的DefaultCustomQueue里 , linkedBlockingQueue
		//把packet封装成OutPacketMessage 发送出去 ,  channel.writeAndFlush(new OutPacketMessage(this));
		
		
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		
		org.demo.netty.im.fake.routing.RoutingTableImpl.dealOfflineWaiterPacket(Packet)
		org.demo.netty.im.fake.store.remote.packet.PacketStoreManager.addRemoteData(RemoteData)
		//OFFLINE : insert到db存起来 ,
		//REVOCATION : 修改message的revocation = 1;
		// 
		
		
		//存储消息
		org.demo.netty.im.fake.store.remote.packet.PacketStoreManager.remotePacket(RemoteData)
		PacketStoreListener包括local和kafka两种listener , 都会发消息 , 但只有local实现类 , local会把message存到db ; kafka listener不做任何处理
		
		
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	   PacketChain.dispatcherCustomerPacket(customerSession, packet);
	   customerSession.cachePacket(packet);//把message存储到LocalTransportStore的DefaultCustomQueue里 , linkedBlockingQueue
	   
	   //注册分配事件到localCustomQueue , 等着客服配对
	   org.demo.netty.im.fake.im.cs.chain.PacketChain.registerAssignEvent(CustomerSession)
	   OCIMServer.getInst().getDispatcher().registerAllotEvent(event);
	   org.demo.netty.im.fake.dispatcher.AllotDispatcher.registerAllotEvent(Event)
	   
	   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	PacketType :
		WEBSOCKET走WebsocketTransport handler
		POLLING(http)走PollingTransport handler
		
		
	
	//用户登录绑定
	org.demo.netty.im.fake.domain.PacketType.BIND
	//waiter接待客户
	org.demo.netty.im.fake.domain.PacketType.RECEPTION
		org.demo.netty.im.fake.dispatcher.scheduler.EventScheduler.EventExecutor.run()	
			org.demo.netty.im.fake.dispatcher.scheduler.EventScheduler.EventExecutor.allot(Event)
				org.demo.netty.im.fake.dispatcher.AllotDispatcher.buildRelation(Event)
					org.demo.netty.im.fake.dispatcher.AllotDispatcher.buildChat(CustomerSession, Waiter)
						*****customerSession.setWaiter(waiter.getWaiterCode(), waiter.getWaiterName());
						*****//生成chat id
								String chatId = IDProvider.getInstance().getChatId();
								customerSession.setCid(chatId);
								
								
	//waiter <-> customer 通信
	org.demo.netty.im.simple.v4.im.handler.PollingTransport.channelRead(ChannelHandlerContext, Object)
	PacketChain.dispatcherCustomerPacket(customerSession, packet);
	OCIMServerV4.getInst().getRoutingTable().routePacket(packet);
								
								
	org.demo.netty.im.fake.dispatcher.register.EventRegister		底层结构是CustomQueue , 底层结构是 LinkedBlockingQueue 
	
	
	
	
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


	//waiter登录校验
	org.demo.netty.im.simple.v4.im.bs.oauth.CertificationCenter.authorizeByWaiter(Channel, Packet, FullHttpRequest)	
	
	
	

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//向后台长轮询消息
    function longPolling(){
        $.ajax({
            async : true,//异步
            url : 'longPollingAction!getMessages.action', 
            type : 'post',
            dataType : 'json',
            data :{},
            timeout : 30000,//超时时间设定30秒
            error : function(xhr, textStatus, thrownError) {
                longPolling();//发生异常错误后再次发起请求
            },
            success : function(response) {
                message = response.data.message;
                if(message!="timeout"){
                    broadcast();//收到消息后发布消息
                }
                longPolling();
            }
        });
    }
    
    
    
    
public class LongPollingAction extends BaseAction {
    private static final long serialVersionUID = 1L;
    private LongPollingService longPollingService;
    private static final long TIMEOUT = 20000;// 超时时间设置为20秒
 
    public String getMessages() {
        long requestTime = System.currentTimeMillis();
        result.clear();
        try {
            String msg = null;
 
            while ((System.currentTimeMillis() - requestTime) < TIMEOUT) {
                msg = longPollingService.getMessages();
                if (msg != null) {
                    break; // 跳出循环，返回数据
                } else {
                    Thread.sleep(1000);// 休眠1秒
                }
            }
            if (msg == null) {
                result.addData("message", "timeout");// 超时
            } else {
                result.addData("message", msg);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
 
        return SUCCESS;
    }
    
    public LongPollingService getLongPollingService() {
        return longPollingService;
    }
 
    public void setLongPollingService(LongPollingService longPollingService) {
        this.longPollingService = longPollingService;
    }
 
}




长轮询：客户端向服务器发送Ajax请求，服务器接到请求后hold住连接，直到有新消息才返回响应信息并关闭连接，客户端处理完响应信息后再向服务器发送新的请求。
优点：在无消息的情况下不会频繁的请求，耗费资源小。
缺点：服务器hold连接会消耗资源，返回数据顺序无保证，难于管理维护。
实例：WebQQ、Hi网页版、Facebook IM。




轮询的终止
轮询可能在以下3种情况时终止：
3.1. 有新数据推送
当循环过程中服务器向浏览器推送信息后，应该主动结束程序运行从而让连接断开，这样浏览器才能及时收到数据。
3.2. 没有新数据推送
循环不能一直持续下去，应该设定一个最长时限，避免WEB服务器超时（Timeout），若一直没有新信息，服务器应主动向浏览器发送本次轮询无新信息的正常响应，并断开连接，这也被称为“心跳”信息。
3.3. 网络故障或异常
由于网络故障等因素造成的请求超时或出错也可能导致轮询的意外中断，此时浏览器将收到错误信息。
轮询的重建
浏览器收到回复并进行相应处理后，应马上重新发起请求，开始一个新的轮询周期。	

	